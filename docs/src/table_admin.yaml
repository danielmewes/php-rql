sections:
  - tag: table_admin
    name: Manipulating tables
    description: These commands allow table manipulation.
    order: 2

commands:
  - tag: table_create
    section: table_admin
    description: |
      Create a table. A RethinkDB table is a collection of JSON documents.
      <br /><br />If successful, the operation returns an object: <code>{created: 1}</code>.  If
      a table with the same name already exists, the operation throws <code>RqlRuntimeError</code>.<br /> Note:
      that you can only use alphanumeric characters and underscores for the table name.<br/>
      <br /><br />When creating a table you can specify the following options:
      <ul>
      <li><code>primary_key</code>(string): the name of the primary key. The default primary key is <code>id</code>;</li>
      <li><code>durability</code>(string): if set to <code>'soft'</code>, this enables <strong>soft durability</strong>
       on this table: writes will be acknowledged by the server immediately and flushed to disk in the background.
       Default is <code>'hard'</code> (acknowledgement of writes happens after data has been written to disk);</li>
      <li><code>cache_size</code>(number): set the cache size (in MB) to be used by the table. Default is 1024MB;</li>
      <li><code>datacenter</code>(string): the name of the datacenter this table should be assigned to.</li>
      </ul>
      <br /><br />In Javascript, these options can use either the underscore or camelcase form (e.g. primaryKey, cacheSize).

    name:
      js: tableCreate
      py: table_create
      rb: table_create
      ph: tableCreate

    body:
      js: "$PARENT.tableCreate(tableName[, options])"
      py: "$PARENT.table_create(table_name[, options])"
      rb: "$PARENT.table_create(table_name[, options])"
      ph: "$PARENT->tableCreate(tableName[, options])"

    io:
      - - db
        - object 

    examples:
      - description: |
          Create a table named 'dc_universe' with the primary key set to field 'id'.
          If a new document doesn't contain the field 'id', the database will
          autogenerate a value for it.
        code:
          py: r.db('test').table_create('dc_universe').run(conn)
          rb: r.db('test').table_create('dc_universe').run(conn)
          js: r.db('test').tableCreate('dc_universe').run(conn, callback)
          ph: r\db('test')->tableCreate('dc_universe')->run($conn);
      - description: |
          Create a table named 'dc_universe' using the field 'name'
          as primary key.
        code:
          py: r.db('test').table_create('dc_universe', primary_key='name').run(conn)
          rb: r.db('test').table_create('dc_universe', :primary_key => 'name').run(conn)
          ph: r\db('test')->tableCreate('dc_universe', array('primary_key' => 'name'))->run($conn);
      - description: |
          Create a table to log the very fast actions of the heroes.
        code:
          py: r.db('test').table_create('hero_actions', durability='soft').run(conn)
          rb: r.db('test').table_create('dc_universe', :durability => 'soft').run(conn)
          ph: r\db('test')->tableCreate('hero_actions', array('durability' => 'soft'))->run($conn);

  - tag: table_drop
    section: table_admin
    description: |
      Drop a table. The table and all its data will be deleted.<br /><br
      />If succesful, the operation returns an object: <code>{dropped: 1}</code>.
      If the specified table doesn''t exist a <code>RqlRuntimeError</code> is thrown.

    name:
      js: tableDrop
      py: table_drop
      rb: table_drop
      ph: tableDrop

    body:
      js: "$PARENT.tableDrop(tableName)"
      py: "$PARENT.table_drop(table_name)"
      rb: "$PARENT.table_drop(table_name)"
      ph: "$PARENT->tableDrop(tableName)"

    io:
      - - db
        - object 

    examples:
      - description: Drop a table named 'dc_universe'.
        code:
          py: r.db('test').table_drop('dc_universe').run(conn)
          rb: r.db('test').table_drop('dc_universe').run(conn)
          js: r.db('test').tableDrop('dc_universe').run(conn, callback)
          ph: r\db('test')->tableDrop('dc_universe')->run($conn);

  - tag: table_list
    section: table_admin
    description: |
      List all table names in a database.<br /><br />
      The result is a list of strings.

    name:
      js: tableList
      py: table_list
      rb: table_list
      ph: tableList

    body:
      js: "$PARENT.tableList()"
      py: "$PARENT.table_list()"
      rb: "$PARENT.table_list"
      ph: "$PARENT->tableList()"

    io:
      - - db
        - array 

    examples:
      - description: List all tables of the 'test' database.
        code:
          py: r.db('test').table_list().run(conn)
          rb: r.db('test').table_list().run(conn)
          js: r.db('test').tableList().run(conn, callback)
          ph: r\db('test')->tableList()->run($conn);

  - tag: index_create
    section: table_admin
    description: Create a new secondary index on this table.

    name:
      js: indexCreate
      rb: index_create
      py: index_create
      ph: indexCreate

    body:
      py: "$PARENT.index_create(index_name[, index_function])"
      js: "$PARENT.indexCreate(indexName[, indexFunction])"
      rb: "$PARENT.index_create(index_name) [{index_function}]"
      ph: "$PARENT->indexCreate(indexName[, indexFunction])"

    io:
      - - table
        - object 

    examples:
      - description: |
          To efficiently query our heros by name we can create a secondary
          index based on the value of that field. We can already quickly query
          heros by name with the primary index but to do the same based on hero
          code names we'll have to create a secondary index based on that
          attribute.
        code:
          js: r.table('dc').indexCreate('code_name').run(conn, callback)
          py: "r.table('dc').index_create('code_name').run(conn)"
          rb: r.table('dc').index_create('code_name').run(conn)
          ph: r\table('dc')->indexCreate('code_name')->run($conn);
      - description: |
          You can also create a secondary index based on an arbitrary function
          on the document.
        code:
          js: |
            r.table('dc').indexCreate('power_rating', function(hero) {
              return hero('combat_power').add(hero('compassion_power').mul(2));
            }).run(conn, callback)
          py: |
            r.table('dc').index_create('power_rating',
              lambda hero: hero['combat_power'] + (2 * hero['compassion_power'])
            ).run(conn)
          rb: |
            r.table('dc').index_create('power_rating') {|hero|
              hero['combat_power'] + (2 * hero['compassion_power'])
            }.run(conn)
          ph: |
            r\table('dc')->indexCreate('power_rating', function($hero) {
                return $hero('combat_power')->add($hero('compassion_power')->mul(2));
              })->run($conn);
      - description: |
          A compound index can be created by returning an array of values to
          use as the secondary index key.
        code:
          js: |
            r.table('dc').indexCreate('parental_planets', function(hero) {
              return [hero('mothers_home_planet'), hero('fathers_home_planet')];
            }).run(conn, callback)
          py: |
            r.table('dc').index_create('parental_planets',
              lambda hero: [hero['mothers_home_planet'], hero['fathers_home_planet']]
            ).run(conn)
          rb: |
            r.table('dc').index_create('parental_planets') {|hero|
              [hero['mothers_home_planet'], hero['fathers_home_planet']]
            }.run(conn)
          ph: |
            r\table('dc')->indexCreate('parental_planets', function($hero) {
                return r\expr(array($hero('mothers_home_planet'), $hero('fathers_home_planet')));
              })->run($conn);
              
  - tag: index_create_multi
    section: table_admin
    description: |
      Like <code>indexCreate</code>. However this creates a multi index.
      Multi index functions should return arrays and allow you to query based on whether a value is present in the returned array.

    name:
      ph: indexCreateMulti

    body:
      ph: "$PARENT->indexCreateMulti(indexName[, indexFunction])"

    io:
      - - table
        - object 

    examples:
      - description: |
          This example allows us to get heroes who possess a specific ability (the field 'abilities' is an array).
        code:
          ph: |
            r\table('dc')->indexCreateMulti('abilities')->run($conn);

  - tag: index_drop
    section: table_admin
    description: Delete a previously created secondary index of this table.

    name:
      js: indexDrop
      py: index_drop
      rb: index_drop
      ph: indexDrop

    body:
      js: "$PARENT.indexDrop(indexName)"
      py: "$PARENT.index_drop(index_name)"
      rb: "$PARENT.index_drop(index_name)"
      ph: "$PARENT->indexDrop(indexName)"

    io:
      - - table
        - object 

    examples:
      - description: Drop a secondary index named 'code_name'.
        code:
          js: r.table('dc').indexDrop('code_name').run(conn, callback)
          py: r.table('dc').index_drop('code_name').run(conn)
          rb: r.table('dc').index_drop('code_name').run(conn)
          ph: r\table('dc')->indexDrop('code_name')->run($conn);

  - tag: index_list
    section: table_admin
    description: List all the secondary indexes of this table.

    name:
      js: indexList
      py: index_list
      rb: index_list
      ph: indexList

    body:
      js: "$PARENT.indexList()"
      py: "$PARENT.index_list()"
      rb: "$PARENT.index_list"
      ph: "$PARENT->indexList()"

    io:
      - - table
        - array

    examples:
      - description: List the available secondary indexes for this table.
        code:
          js: r.table('marvel').indexList().run(conn, callback)
          py: r.table('marvel').index_list().run(conn)
          rb: r.table('marvel').index_list().run(conn)
          ph: r\table('dc')->indexList()->run($conn);

  - tag: index_status
    section: table_admin
    description: |
      Get the status of the specified indexes on this table,
      or the status of all indexes on this table if no indexes are specified.

    name:
      ph: indexStatus

    body:
      ph: "$PARENT->indexStatus([indexName | array(indexName1, indexName2, ...)])"

    io:
      - - table
        - array

    examples:
      - description: Get the status of all the indexes on the table.
        code:
          ph: r\table('dc')->indexStatus()->run($conn);
      - description: Get the status of the <code>code_name</code> index.
        code:
          ph: r\table('dc')->indexStatus('code_name')->run($conn);
          
  - tag: index_wait
    section: table_admin
    description: |
      Wait for the specified indexes on this table to be ready,
      or for all indexes on this table to be ready if no indexes are specified.

    name:
      ph: indexWait

    body:
      ph: "$PARENT->indexWait([indexName | array(indexName1, indexName2, ...)])"

    io:
      - - table
        - array

    examples:
      - description: Wait for all indexes on the table to be ready.
        code:
          ph: r\table('dc')->indexWait()->run($conn);
      - description: Wait for the index <code>code_name</code> to be ready.
        code:
          ph: r\table('dc')->indexWait('code_name')->run($conn);


