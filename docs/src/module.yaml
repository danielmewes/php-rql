sections:
  - tag: module
    name: Accessing RQL
    description: All RQL queries begin from the top level module.
    order: 0

commands:
  - tag: r
    section: module
    description: The toplevel RQL namespace.

    body: "r"

    io:
      - - null
        - r

    examples:
      - description: Setup your top level namespace.
        validate: false
        code:
          js: var r = require('rethinkdb');
          py: import rethinkdb as r
          rb: |
            require 'rethinkdb'
            include RethinkDB::Shortcuts
          ph: require_once('rdb/rdb.php');

  - tag: systemInfo
    section: module
    description: |
      Returns a string providing some information on the current state of the PHP-RQL driver.
      Currently, it prints the protocol buffer backend used. Either php-protobuf or pb4php.

    body: "$PARENT\\systemInfo()"
    io:
      - - r
        - string

    examples:
      - description: Check if PHP-RQL is using the faster php-protobuf library.
        validate: true
        code: echo r\systemInfo();
          
    js: false
    py: false
    rb: false

  - tag: connect
    section: module
    description: |
      Create a new connection to the database server.<br /><br />If the
      connection cannot be established, a <code>RqlDriverError</code> exception will
      be thrown.

    body:
      js: "$PARENT.connect(opts, callback)"
      py: "$PARENT.connect(host='localhost', port=28015, db='test', auth_key='')"
      rb: "$PARENT.connect(opts)"
      ph: "$PARENT\\connect(host, port=28015[, db[, authKey]])"

    io:
      - - r
        - connection

    examples:
      - description: Opens a new connection to the database.
        validate: false
        code:
          js: |
            r.connect({host:'localhost', port:28015, db:'marvel'},
                 function(err, conn) { ... })
          py: conn = r.connect(db='heroes')
          rb: conn = r.connect('localhost', 28015, 'heroes')
          ph: $conn = r\connect('localhost', 28015, 'heroes');

    py:
      examples:
        0:
          description: Opens a connection using the default host and port but specifying the default database.

    rb:
      examples:
        0:
          description: Opens a connection to localhost:28015 with 'heroes' as the default database.

  - tag: repl
    section: module
    description: |
      Set the default connection to make REPL use easier. Allows calling
      <code>run()</code> without specifying a connection. <br/><br />
      Connection objects are not thread safe and <code>repl</code> connections
      should not be used in multi-threaded environments.

    io:
      - - connection
        - null

    body:
      py: "$PARENT.repl()"
      rb: "$PARENT.repl"

    examples:
      - description: |
            Set the default connection in REPL, and call `run()`
            without specifying the connection.
        validate: false
        code:
          py: |
            r.connect().repl()
            r.table('users').run()
          rb: |
            r.connect().repl
            r.table('users').run

    js: false
    ph: false

  - tag: close
    section: module
    description: |
      Close an open connection.
      Closing a connection waits until all outstanding requests
      have finished and then frees any open resources associated with the connection.
      If the optional <code>noreplyWait</code> argument is set to <code>false</code>,
      all outstanding requests are canceled immediately.

    body:
      ph: "$PARENT->close([noreplyWait])"

    io:
      - - connection
        - null

    examples:
      - description: Close an open connection, waiting for noreply writes to finish.
        validate: false
        code: $conn->close();
      - description: Close an open connection immediately.
        validate: false
        code: $conn->close(false)

  - tag: reconnect
    section: module
    description: |
      Close and attempt to reopen a connection.
      Closing a connection waits until all outstanding requests
      have finished and then frees any open resources associated with the connection.
      If the optional <code>noreplyWait</code> argument is set to <code>false</code>,
      all outstanding requests are canceled immediately.

    body:
      ph: "$PARENT->reconnect([noreplyWait])"

    io:
      - - connection
        - null

    examples:
      - description: Cancel outstanding requests/queries that are no longer needed.
        validate: false
        code:
          ph: $conn->reconnect(false);

  - tag: use
    section: module
    description: Change the default database on this connection.

    body:
      py: "$PARENT.use(db_name)"
      rb: "$PARENT.use(db_name)"
      js: "$PARENT.use(dbName)"
      ph: "$PARENT->useDb(dbName)"

    io:
      - - connection
        - null

    examples:
      - description: |
          Change the default database so that we don't need
          to specify the database when referencing a table.
        code: conn.use('heroes')
        
    ph:
      name: useDb
      examples:
        0:
          code: $conn->useDb('heroes');

  - tag: run
    section: module
    description: Run a query on a connection.

    body:
      js: "$PARENT.run(conn/options[, callback])"
      py: "$PARENT.run(conn[, use_outdated=False, time_format=<time_format>])"
      rb: "$PARENT.run(conn[, opts])"
      ph: "$PARENT.run(conn[, array(option1 => value1, option2 => value2, ...)])"

    io:
      - - query
        - cursor

    examples:
      - description: |
          Call run on the connection with a query to execute the query.
          The callback will get a cursor from which results may be retrieved.
        validate: false
        code:
          js: r.table('marvel').run(conn, function(err, cur) { cur.each(console.log); })
          py: |
            for doc in r.table('marvel').run(conn):
              print doc
          rb: r.table('marvel').run(conn).each{|x| p x}
          ph: |
            $cur = r\table('marvel')->run($conn);
            foreach ($cur as $doc)
              echo "$doc\n";
      - description: |
          If you are OK with potentially out of date data from all the tables
          involved in this query and want potentially faster reads, pass a flag
          allowing out of date data in an options object.  Settings for
          individual tables will supercede this global setting for all tables
          in the query.
        validate: false
        code:
          js: |
            r.table('marvel').run({connection:conn, useOutdated:true},
                                  function (err, cursor) { ... });
          py: r.table('marvel').run(conn, use_outdated=True)
          rb: r.table('marvel').run(conn, :use_outdated => true)
          ph: r\table('marvel')->run($conn, array('use_outdated' => true));
      - description: |
          If you just want to send a write and forget about it, you
          can set `noreply` to true in the options.  In this case
          `run` will return immediately.
        validate: false
        code:
          js: |
            r.table('marvel').run({connection:conn, noreply:true},
                                  function (err, cursor) { ... });
          py: r.table('marvel').run(conn, noreply=True)
          rb: r.table('marvel').run(conn, :noreply => true)
          ph: r\table('marvel')->run($conn, array('noreply' => true));
      - description: |
          If you want to specify whether to wait for a write to be
          written to disk (overriding the table's default settings),
          you can set `durability` to `'hard'` or `'soft'` in the
          options.
        validate: false
        code:
          js: |
            r.table('marvel')
             .insert({ superhero: 'Iron Man', superpower: 'Arc Reactor' })
             .run({connection:conn, noreply:true, durability: 'soft'},
                  function (err, cursor) { ... });
          py: |
            r.table('marvel')
             .insert({ 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' })
             .run(conn, noreply=True, durability='soft')
          rb: |
            r.table('marvel')
             .insert({ :superhero => 'Iron Man', :superpower => 'Arc Reactor' })
             .run(conn, :noreply => true, :durability => 'soft')
          ph: |
            r\table('marvel')
             ->insert(array( 'superhero' => 'Iron Man', 'superpower' => 'Arc Reactor' ))
             ->run($conn, array('noreply' => true, 'durability' => 'soft'))
      - description: |
          If you do not want a time object to be converted to a native date object,
          you can pass a time_format flag to prevent it (valid flags are "raw" and "native").
          This query returns an object with two fields (epoch_time and $reql_type$)
          instead of a native date object.
        validate: false
        code:
          js: |
            r.now().run({connection:conn, timeFormat:"raw"},
                function (err, result) { ... });
          py: |
            r.now().run(conn, time_format="raw")
          rb: |
            r.now().run(conn, :time_format=>"raw")
          js: |
            r\now()->run($conn, array('timeFormat' => 'raw'));
            
    ph:
      examples:
        4: {}

  - tag: noreply_wait
    section: module
    description: |
      <code>noreplyWait</code> ensures that previous queries with the noreply flag have been processed
      by the server. Note that this guarantee only applies to queries run on the given connection.
    
    name:
      ph: noreplyWait

    body:
      ph: "$PARENT->noreplyWait()"

    io:
      - - connection
        - null

    examples:
      - description: |
          We have previously run queries with the <code>noreply</code> argument set to true.
          Now wait until the server has processed them.
        validate: false
        code: $conn->noreplyWait();

  - tag: next
    section: module
    description: Get the next element in the cursor.

    body: "$PARENT.next(callback)"

    io:
      - - cursor
        - null

    examples:
      - description: Let's grab the next element!
        code: |
          cur.next(function(err, row) {
            return processRow(row);
          });

    py: false
    rb: false
    ph: false

  - tag: hasNext
    section: module
    description: Check if there are more elements in the cursor.

    body: "$PARENT.hasNext()"

    io:
      - - cursor
        - bool

    examples:
      - description: Are there more elements in the cursor?
        code: var hasMore = cur.hasNext();

    py: false
    rb: false
    ph: false

  - tag: each
    section: module
    description: Lazily iterate over the result set one element at a time.

    body: "$PARENT.each(callback[, onFinished])"

    io:
      - - cursor
        - null

    examples:
      - description: Let's process all the elements!
        code: |
          cur.each(function(err, row) {
            processRow(row);
          });
      - description: If we need to know when iteration is complete
                     each also accepts a second `onFinished` callback.
        code: |
          cur.each(function(err, row) {
            return processRow(row);
          }, function() {
            doneProcessing();
          });
      - description: Iteration can be stopped prematurely by returning `false`
                     from the callback.
        code: |
            cur.each(function(err, row) {
                if (processRow(row) < 0)
                    return false;
            });

    py: false
    rb: false
    ph: false

  - tag: toArray
    section: module
    description: Retrieve all results and pass them as an array to the given callback.

    body: "$PARENT.toArray(callback)"

    io:
      - - cursor
        - null

    examples:
      - description: For small result sets it may be more convenient to process them at once as an array.
        validate: false
        code: 
          js: |
            cur.toArray(function(err, results) {
              for(var i in results) {
                processRow(results[i]);
              }
            });
          ph: print_r($cur->toArray());
          
    ph:
      body: "$PARENT->toArray()"
      io:
        - - cursor
          - array

    py: false
    rb: false
    
    
  - tag: toNative
    section: module
    description: |
      Convert a result item to a native PHP representation. RethinkDB documents are represented
      as objects of type r\Datum. Calling toNative() on such an object will generate an equivalent
      native PHP object, usually an associative array.
      The other direction (converting from a native PHP data type to a r\Datum) can be performed
      by using r\expr().

    body: "$PARENT->toNative()"
    parent: datum
    returns: null

    examples:
      - description: Use PHP's print_r() function to print a specific document from the database.
        code:
          ph: print_r(r\table('marvel')->get('superman')->run($conn)->toNative());

    py: false
    rb: false
    js: false

  - tag: close-cursor
    name: close (cursor)
    section: module
    description: |
      Close a cursor. Closing a cursor cancels the corresponding query
      and frees the memory associated with the open request.

    body:
      py: "$PARENT.close()"
      rb: "$PARENT.close"
      js: "$PARENT.close()"
      ph: "$PARENT->close()"

    io:
      - - cursor 
        - null

    examples:
      - description: Close a cursor.
        validate: false
        code: cursor.close()
        
    ph:
      examples:
        0:
          code: cursor->close();

    py: false
    rb: false

  - tag: addListener
    section: module
    description: |
        The connection object also supports the event emitter interface so you can listen for
        changes in connection state.

    body: "$PARENT.addListener(event, listener)"

    io:
      - - connection
        - null

    examples:
      - description: Monitor connection state with events 'connect', 'close', and 'error'.
        validate: false
        code: |

          r.connect({}, function(err, conn) {
              if (err) throw err;

              conn.addListener('error', function(e) {
                processNetworkError(e);
              });

              conn.addListener('close', function() {
                cleanup();
              });

              runQueries(conn);
          });

      - description: As in Node, 'on' is a synonym for 'addListener'.
        validate: false
        code: |
            conn.on('close', function() {
                cleanup();
            });

            conn.close();

    py: false
    rb: false
    ph: false
